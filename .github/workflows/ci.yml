name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.22, 1.23, '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Verify Go version
      run: go version
      
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests (functional)
      run: |
        go test -v ./...
      
    - name: Run tests (demonstration) - expect failures
      run: go test -tags demo -v ./testfailures/demo/... || true
      
    - name: Run tests (examples) - expect failures
      run: go test -tags examples -v ./docs/examples/... || true
      
    - name: Run tests with race detection
      run: go test -race -v ./...
      
    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Build
      run: go build -v ./...
      
    - name: Build examples
      run: |
        go build -o /tmp/example_cpf ./docs/examples/
        go build -o /tmp/example_demo ./testfailures/demo/
        
    - name: Check for common issues
      run: |
        go vet ./...
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not formatted. Run 'go fmt ./...' to fix."
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"
        
    - name: Run static analysis
      run: |
        # Try latest version first, fallback to specific version if needed
        go install honnef.co/go/tools/cmd/staticcheck@latest || go install honnef.co/go/tools/cmd/staticcheck@v0.6.0
        staticcheck ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Run Gosec Security Scanner
      uses: securego/gosec@v2.22.8
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
